https://git-scm.com/docs

# Terminal Crash Course (Windows)
ls -> print current directory
ls -a -> print also hidden files 
start . -> open explorer in particular directory
cd -> change direction
.. cd -> go one directory back
pwd -> print current directory/location
mkdir <name of folder> -> create folder
touch <name of file.ext> -> create file
rm <name of file.ext> -> delete file (permament - attention: file is gone!)
rm -rf <name of folder> delete a directory (flags: r = recursive, f = force)

# The Very Basics Of Git: Adding & Committing
git status -> gives information on the current status of a git repi and its content
git init -> Initialize git repo (.git)
Git tracks top-down (nested folders - do not init a repo inside of a repo)

Working Directory --- git add ---> Staging --- git commit ---> Repo 

Use "git add" to group changed files together to staging phase to prepare for commit, then commit it to repo

git log -> retrieve information of the commits

# Commits in Detail
Make atomic commits - each commits should focus on a single thing (for example one feature)
Use present tense imperative style for commit messages
When you use only "git commit" it will open efalut editor VIM to write commit message. If you write ":wq " and then enter to go out of VIM.
So therefore we will use another default editor (VS) -> git config --global core.editor "code --wait"

git log --oneline -> commit message is prefixed with information on the same line (format logs)
git commit --amend -> If you forgot a file or made a typo in (just one) commit message (ago), instead of making a new commit you can amend a commit 
Example:
git commit -m "some commit"
git add forgotten_file
git commit --amend

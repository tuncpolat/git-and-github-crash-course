https://git-scm.com/docs

# Terminal Crash Course (Windows)
ls -> print current directory
ls -a -> print also hidden files 
start . -> open explorer in particular directory
cd -> change direction
.. cd -> go one directory back
pwd -> print current directory/location
mkdir <name of folder> -> create folder
touch <name of file.ext> -> create file
rm <name of file.ext> -> delete file (permament - attention: file is gone!)
rm -rf <name of folder> delete a directory (flags: r = recursive, f = force)

==========================================

# The Very Basics Of Git: Adding & Committing
git status -> gives information on the current status of a git repi and its content
git init -> Initialize git repo (.git)
Git tracks top-down (nested folders - do not init a repo inside of a repo)

Working Directory --- git add ---> Staging --- git commit ---> Repo 

Use "git add" to group changed files together to staging phase to prepare for commit, then commit it to repo

git log -> retrieve information of the commits

==========================================

# Commits in Detail
Make atomic commits - each commits should focus on a single thing (for example one feature)
Use present tense imperative style for commit messages
When you use only "git commit" it will open defalut editor VIM to write commit message. If you write ":wq " and then enter to go out of VIM.
So therefore we will use another default editor (VS) -> git config --global core.editor "code --wait"

git log --oneline -> commit message is prefixed with information on the same line (format logs)
git commit --amend -> If you forgot a file or made a typo in (just one) commit message (ago), instead of making a new commit you can amend a commit 
Example:
git commit -m "some commit"
git add forgotten_file
git commit --amend (amend will open editor - if you had a typo in commit message you can edit it here)

If you just had a typo you can just use "git commit --amend" to fix it in the editor

.gitignore -> file to tell git what to ignore (for example: log files, operating system files, secrets, api key, dependencies)

.DS_Store will ignore files named .DS_Store
folderName/ will ignore an entire directory
*.log will ignore any files with .log extension


==========================================

# Working with Banches
Master is just another branch.
HEAD is a pointer that refers to the current "location" in your repo. Points to a particular branch (for example HEAD -> master)

git branch -> show current branches
git branch <branch-name> -> create a new branch (based upon the current HEAD... if you branch from branch it will use this branch as starting point)
git switch <branch-name> -> switch between branches (old way: git checkout - does a lot more)
git switch -c <branch-name> -> create and switch to a new branch

If you switch a branch with unstaged changes, you will get an error. The new branch will not about these changes. Options: commit or stash.
BUT: If you have no conflicts when you switch between the branches, the changes will be switched too. So you will have the changes you made in the file you switched to.